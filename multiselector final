import React, { useState, useRef, useEffect } from "react";
import { Checkbox } from "@/app/components/ui/checkbox";
import { Input } from "@/app/components/ui/input";
import { Popover, PopoverContent, PopoverTrigger } from "./popover";
import { X, ChevronDown, Search } from "lucide-react";
import { MultiSelectProps } from "@/types/trips-type";

export function MultiSelect({
  options,
  selected,
  onChange,
  placeholder = "Select...",
  disabled = false,
}: MultiSelectProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const searchInputRef = useRef<HTMLInputElement>(null);

  // Filter options based on search term
  const filteredOptions = options.filter((opt) =>
    opt.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Toggle selected value
  const toggleValue = (value: string) => {
    if (disabled) return;
    
    if (selected.includes(value)) {
      onChange(selected.filter((v) => v !== value));
    } else {
      onChange([...selected, value]);
    }
  };

  // Remove a selected value
  const removeValue = (value: string, e: React.MouseEvent) => {
    e.stopPropagation();
    if (disabled) return;
    onChange(selected.filter((v) => v !== value));
  };

  // Get selected option objects
  const selectedOptions = options.filter((opt) => opt._id && selected.includes(opt._id));

  // Focus search input when dropdown opens
  useEffect(() => {
    if (isOpen && searchInputRef.current) {
      setTimeout(() => {
        searchInputRef.current?.focus();
      }, 100);
    }
  }, [isOpen]);

  // Clear search when dropdown closes
  useEffect(() => {
    if (!isOpen) {
      setSearchTerm("");
    }
  }, [isOpen]);

  // Handle option click
  const handleOptionClick = (optionId: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (!disabled && optionId) {
      toggleValue(optionId);
    }
  };

  // Handle search input change
  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
  };

  return (
    <div className="relative w-full">
      <Popover open={!disabled && isOpen} onOpenChange={open => !disabled && setIsOpen(open)}>
        <PopoverTrigger disabled={disabled} asChild>
          <div
            className={`relative w-full min-h-[40px] border border-input bg-background rounded-md px-3 py-2 text-left transition-colors ${
              disabled 
                ? "opacity-50 cursor-not-allowed bg-muted" 
                : "hover:bg-accent/5 focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2 cursor-pointer"
            } ${isOpen ? 'ring-2 ring-ring ring-offset-2' : ''}`}
          >
            <div className="flex flex-wrap gap-1 items-center pr-8 min-h-[24px]">
              {selectedOptions.length === 0 ? (
                <span className="text-muted-foreground text-sm">{placeholder}</span>
              ) : (
                selectedOptions.map((opt) => (
                  <span
                    key={opt._id}
                    className="inline-flex items-center bg-secondary text-secondary-foreground rounded-md px-2 py-1 text-xs font-medium gap-1 max-w-[140px]"
                  >
                    <span className="truncate" title={opt.name}>
                      {opt.name.length > 15 ? `${opt.name.slice(0, 15)}...` : opt.name}
                    </span>
                    <button
                      type="button"
                      className={`inline-flex items-center justify-center rounded-full w-3 h-3 opacity-70 hover:opacity-100 hover:bg-secondary-foreground/20 transition-opacity ${
                        disabled ? "cursor-not-allowed" : "cursor-pointer"
                      }`}
                      onClick={(e) => opt._id && removeValue(opt._id, e)}
                      disabled={disabled}
                      aria-label={`Remove ${opt.name}`}
                    >
                      <X size={8} />
                    </button>
                  </span>
                ))
              )}
            </div>
            <ChevronDown 
              className={`absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground transition-transform ${
                disabled ? 'opacity-50' : ''
              } ${isOpen ? 'rotate-180' : ''}`} 
            />
          </div>
        </PopoverTrigger>

        <PopoverContent 
          className="w-[var(--radix-popover-trigger-width)] p-0" 
          align="start"
          sideOffset={4}
        >
          {/* Search Input */}
          <div className="p-2 border-b border-border bg-background/95">
            <div className="relative">
              <Search className="absolute left-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                ref={searchInputRef}
                placeholder="Search options..."
                value={searchTerm}
                onChange={handleSearchChange}
                className="pl-8 h-8 text-sm border-0 focus-visible:ring-1 focus-visible:ring-ring"
                autoComplete="off"
              />
            </div>
          </div>

          {/* Options List */}
          <div className="max-h-[150px] overflow-y-auto p-1">
            {filteredOptions.length === 0 ? (
              <div className="px-3 py-6 text-center text-sm text-muted-foreground">
                {searchTerm ? 'No results found.' : 'No options available.'}
              </div>
            ) : (
              filteredOptions.map((opt) => {
                const isSelected = selected.includes(opt._id || '');
                return (
                  <div
                    key={opt._id}
                    onClick={(e) => handleOptionClick(opt._id || '', e)}
                    className={`flex items-center gap-3 px-3 py-2 cursor-pointer rounded-sm transition-colors ${
                      disabled ? "cursor-not-allowed opacity-50" : ""
                    } ${isSelected ? 'bg-accent/50' : 'hover:bg-accent'}`}
                  >
                    <Checkbox
                      checked={isSelected}
                      onChange={() => {}} // Controlled by parent click
                      disabled={disabled}
                      className="shrink-0"
                    />
                    <span className="flex-1 text-sm" title={opt.name}>
                      {searchTerm ? (
                        <HighlightMatch text={opt.name} searchTerm={searchTerm} />
                      ) : (
                        opt.name
                      )}
                    </span>
                  </div>
                );
              })
            )}
          </div>

          {/* Footer */}
          {filteredOptions.length > 0 && (
            <div className="border-t px-3 py-2 text-xs text-muted-foreground bg-muted/20">
              {selected.length > 0 && (
                <span className="font-medium">
                  {selected.length} selected â€¢ 
                </span>
              )}{" "}
              {filteredOptions.length} option{filteredOptions.length !== 1 ? 's' : ''} 
              {searchTerm && filteredOptions.length !== options.length && (
                <span> (filtered from {options.length})</span>
              )}
            </div>
          )}
        </PopoverContent>
      </Popover>
    </div>
  );
}

// Helper component to highlight matching text
const HighlightMatch: React.FC<{ text: string; searchTerm: string }> = ({ 
  text, 
  searchTerm 
}) => {
  if (!searchTerm) return <>{text}</>;

  const regex = new RegExp(`(${searchTerm.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
  const parts = text.split(regex);

  return (
    <>
      {parts.map((part, index) => 
        regex.test(part) ? (
          <mark key={index} className="bg-yellow-200 text-yellow-900 rounded px-0.5">
            {part}
          </mark>
        ) : (
          <span key={index}>{part}</span>
        )
      )}
    </>
  );
};


 <MultiSelect
                    options={locationOptions}
                    selected={selectedLocations}
                    onChange={handleLocationSelectionChange}
                    placeholder={
                      formData.route
                        ? maxLocations !== Infinity
                          ? `Select up to ${maxLocations} locations`
                          : "Select locations"
                        : "Select route first"
                    }
                    disabled={!formData.route}
                  />
