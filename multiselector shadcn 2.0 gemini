import React, { useState, useRef, useEffect } from 'react';
// Assuming shadcn/ui components are available and imported elsewhere in your project.
// For demonstration, we'll use basic HTML elements and Tailwind classes
// to mimic their behavior and appearance.
// In a real shadcn/ui project, you would import:
// import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover";
// import { Button } from "@/components/ui/button";
// import { Command, CommandInput, CommandList, CommandEmpty, CommandGroup, CommandItem } from "@/components/ui/command";
// import { Badge } from "@/components/ui/badge";
// import { X, Check } from "lucide-react"; // Example icons

// Define the structure for an option
interface Option {
  value: string;
  label: string;
  // Add any other properties your options might have
}

interface MultiSelectProps {
  options: Option[]; // Array of options to display in the dropdown
  placeholder?: string; // Placeholder text for the input
  onSelectChange: (selectedValues: string[]) => void; // Callback function to return selected values
  initialSelectedValues?: string[]; // Optional initial selected values
}

const MultiSelect: React.FC<MultiSelectProps> = ({
  options,
  placeholder = "Select options...",
  onSelectChange,
  initialSelectedValues = [],
}) => {
  // State to manage the open/closed state of the dropdown
  const [isOpen, setIsOpen] = useState(false);
  // State to manage the currently selected options
  const [selectedOptions, setSelectedOptions] = useState<Option[]>([]);
  // State for the search input value
  const [searchValue, setSearchValue] = useState('');

  // Ref to close the dropdown when clicking outside
  const componentRef = useRef<HTMLDivElement>(null);

  // Initialize selected options based on initialSelectedValues prop
  useEffect(() => {
    const initial = options.filter(option => initialSelectedValues.includes(option.value));
    setSelectedOptions(initial);
  }, [options, initialSelectedValues]); // Re-run if options or initial values change

  // Effect to call the onSelectChange callback whenever selectedOptions changes
  useEffect(() => {
    onSelectChange(selectedOptions.map(option => option.value));
  }, [selectedOptions, onSelectChange]); // Re-run if selectedOptions or callback changes

  // Effect to handle clicks outside the component to close the dropdown
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (componentRef.current && !componentRef.current.contains(event.target as Node)) {
        setIsOpen(false);
        setSearchValue(''); // Clear search when closing
      }
    };

    // Add event listener
    document.addEventListener('mousedown', handleClickOutside);

    // Clean up the event listener on component unmount
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [componentRef]); // Dependency array includes componentRef

  // Function to toggle the selection of an option
  const handleSelectOption = (option: Option) => {
    const isSelected = selectedOptions.some(selected => selected.value === option.value);

    if (isSelected) {
      // Deselect the option
      setSelectedOptions(selectedOptions.filter(selected => selected.value !== option.value));
    } else {
      // Select the option
      setSelectedOptions([...selectedOptions, option]);
    }
    setSearchValue(''); // Clear search after selection
    // Optionally keep dropdown open or close based on desired behavior
    // setIsOpen(false); // Uncomment to close after selection
  };

  // Function to remove a selected badge
  const handleRemoveBadge = (optionToRemove: Option) => {
    setSelectedOptions(selectedOptions.filter(option => option.value !== optionToRemove.value));
  };

  // Filter options based on search input
  const filteredOptions = options.filter(option =>
    option.label.toLowerCase().includes(searchValue.toLowerCase())
  );

  // Determine text to display on the button
  const buttonText = selectedOptions.length > 0
    ? `${selectedOptions.length} selected`
    : placeholder;

  return (
    // Using a div to simulate the Popover component structure
    <div className="relative w-full min-w-[200px]" ref={componentRef}>
      {/* Using a button to simulate PopoverTrigger */}
      <button
        type="button"
        className="flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1"
        onClick={() => setIsOpen(!isOpen)}
        aria-haspopup="listbox"
        aria-expanded={isOpen}
      >
        {/* Display selected badges or placeholder */}
        <div className="flex flex-wrap gap-1">
          {selectedOptions.map(option => (
            // Using a div to simulate the Badge component
            <div
              key={option.value}
              className="flex items-center rounded-md border bg-muted px-2 py-0.5 text-xs font-semibold transition-colors hover:bg-muted/80"
            >
              {option.label}
              {/* Using a button to simulate the remove icon */}
              <button
                type="button"
                className="ml-1 rounded-full outline-none ring-offset-background focus:ring-2 focus:ring-ring focus:ring-offset-2"
                onClick={(e) => {
                  e.stopPropagation(); // Prevent button click from closing dropdown
                  handleRemoveBadge(option);
                }}
              >
                {/* Basic 'x' icon */}
                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
              </button>
            </div>
          ))}
          {selectedOptions.length === 0 && <span>{placeholder}</span>}
        </div>
        {/* Basic chevron icon */}
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={`transition-transform ${isOpen ? 'rotate-180' : ''}`}><path d="m6 9 6 6 6-6"/></svg>
      </button>

      {/* Using a div to simulate PopoverContent */}
      {isOpen && (
        <div className="absolute z-50 mt-1 w-full rounded-md border bg-popover text-popover-foreground shadow-md outline-none animate-in fade-in-0 zoom-in-95">
          {/* Using a div to simulate Command component */}
          <div>
            {/* Using an input to simulate CommandInput */}
            <input
              type="text"
              placeholder="Search options..."
              className="flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50 px-4"
              value={searchValue}
              onChange={(e) => setSearchValue(e.target.value)}
            />
            {/* Using a div to simulate CommandList */}
            <div className="max-h-[200px] overflow-y-auto">
              {/* Using a div to simulate CommandEmpty */}
              {filteredOptions.length === 0 && (
                <div className="py-6 text-center text-sm">No results found.</div>
              )}
              {/* Using a div to simulate CommandGroup */}
              <div>
                {filteredOptions.map(option => {
                  const isSelected = selectedOptions.some(selected => selected.value === option.value);
                  return (
                    // Using a button to simulate CommandItem
                    <button
                      key={option.value}
                      type="button"
                      className="relative flex w-full cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 hover:bg-accent hover:text-accent-foreground"
                      onClick={() => handleSelectOption(option)}
                      role="option" // ARIA role for listbox option
                      aria-selected={isSelected}
                    >
                      {/* Basic checkmark icon */}
                      <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={`mr-2 ${isSelected ? 'opacity-100' : 'opacity-0'}`}><path d="M20 6 9 17l-5-5"/></svg>
                      {option.label}
                    </button>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default MultiSelect;


import MultiSelect from '@/components/MultiSelect'; // Adjust the import path

const MyPage = () => {
  const sampleOptions = [
    { value: 'apple', label: 'Apple' },
    { value: 'banana', label: 'Banana' },
    { value: 'cherry', label: 'Cherry' },
    { value: 'date', label: 'Date' },
    { value: 'grape', label: 'Grape' },
  ];

  const handleSelectedChange = (selectedValues: string[]) => {
    console.log('Selected values:', selectedValues);
    // Do something with the selected values, e.g., update state in the parent component
  };

  return (
    <div className="p-4">
      <h1>Select Your Fruits</h1>
      <MultiSelect
        options={sampleOptions}
        placeholder="Choose fruits..."
        onSelectChange={handleSelectedChange}
        initialSelectedValues={['banana', 'grape']} // Optional: set initial selections
      />
    </div>
  );
};

export default MyPage;
