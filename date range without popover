"use client";

import * as React from "react";
import { format } from "date-fns";
import { CalendarIcon } from "lucide-react";

import { cn } from "@/lib/utils";
import { Button } from "@/app/components/ui/button";
import { Calendar } from "@/app/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/app/components/ui/popover";

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/app/components/ui/dialog";

import { CreateNewTripProps } from "@/types/trips-type";

export default function CreateNewTrip({ isOpen, onClose }: CreateNewTripProps) {

  
  const [date, setDate] = React.useState<Date | undefined>(undefined);
  const [open, setOpen] = React.useState(false);
  const triggerRef = React.useRef<HTMLButtonElement>(null);
  const popoverRef = React.useRef<HTMLDivElement>(null);

  // Close popover on outside click
  React.useEffect(() => {
    function onClickOutside(event: MouseEvent) {
      if (
        popoverRef.current &&
        !popoverRef.current.contains(event.target as Node) &&
        triggerRef.current &&
        !triggerRef.current.contains(event.target as Node)
      ) {
        setOpen(false);
      }
    }
    if (open) {
      document.addEventListener("mousedown", onClickOutside);
    } else {
      document.removeEventListener("mousedown", onClickOutside);
    }
    return () => document.removeEventListener("mousedown", onClickOutside);
  }, [open]);

  if (!isOpen) return null;

  return (
    <div
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/50"
      onClick={onClose}
    >
      <div
        className="relative bg-white rounded-lg shadow-lg w-full max-w-lg p-6"
        onClick={(e) => e.stopPropagation()} // Prevent closing modal when clicking inside
      >
        <h2 className="text-2xl font-semibold mb-4">Create New Trip</h2>

        {/* Custom Popover Trigger */}
        <div className="relative inline-block text-left">
          <Button
            variant="outline"
            onClick={() => setOpen((prev) => !prev)}
            ref={triggerRef}
            className={cn(
              "w-[240px] justify-start text-left font-normal",
              !date && "text-muted-foreground"
            )}
            aria-expanded={open}
            aria-haspopup="true"
            aria-controls="calendar-popover"
          >
            <CalendarIcon className="mr-2 h-4 w-4" />
            {date ? format(date, "PPP") : <span>Pick a date</span>}
          </Button>

          {/* Popover Panel */}
          {open && (
            <div
              ref={popoverRef}
              id="calendar-popover"
              role="dialog"
              aria-modal="true"
              tabIndex={-1}
              className="absolute z-50 mt-2 w-auto rounded-md border border-gray-200 bg-white p-0 shadow-lg focus:outline-none"
              style={{ minWidth: triggerRef.current?.offsetWidth }}
            >
              <Calendar
                mode="single"
                selected={date}
                onSelect={(selectedDate) => {
                  setDate(selectedDate);
                  setOpen(false);
                }}
                initialFocus
              />
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

