import React, { useEffect, useState, useRef, useCallback } from "react";
import {
  GoogleMap,
  useJsApiLoader,
  OverlayView,
  DirectionsRenderer,
} from "@react-google-maps/api";
import Image from "next/image";
import { CurrentLocation, Location } from "@/types/map-type";

const containerStyle = { width: "100%", height: "100%" };

const googleMapsApiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY || "";

const MapComponent: React.FC<{
  locations: Location[];
  currentLocation: CurrentLocation;
}> = ({ locations, currentLocation }) => {
  const [directionsResult, setDirectionsResult] = useState<google.maps.DirectionsResult | null>(null);
  const [partialDirectionsResult, setPartialDirectionsResult] = useState<google.maps.DirectionsResult | null>(null);
  const [hoveredMarkerIndex, setHoveredMarkerIndex] = useState<number | null>(null);
  const [mapLoaded, setMapLoaded] = useState(false);
  const mapRef = useRef<google.maps.Map | null>(null);

  const { isLoaded, loadError } = useJsApiLoader({
    googleMapsApiKey,
    id: 'google-map-script'
  });

  const onMapLoad = useCallback((map: google.maps.Map): void => {
    mapRef.current = map;
    setMapLoaded(true);
  }, []);

  // for route
  useEffect(() => {
    if (
      !isLoaded ||
      !mapLoaded ||
      !locations ||
      locations.length < 2
    ) return;

    const origin = locations[0];
    const destination = locations[locations.length - 1];
    const waypoints = locations.slice(1, -1).map((loc) => ({
      location: { lat: loc.lat, lng: loc.lng },
      stopover: true,
    }));

    const directionsService = new window.google.maps.DirectionsService();

    // Full route
    directionsService.route(
      {
        origin: { lat: origin.lat, lng: origin.lng },
        destination: { lat: destination.lat, lng: destination.lng },
        waypoints,
        travelMode: window.google.maps.TravelMode.DRIVING,
        optimizeWaypoints: false,
      },
      (result, status) => {
        if (status === "OK" && result) setDirectionsResult(result);
        else setDirectionsResult(null);
      }
    );

    // Partial route up to current location
    directionsService.route(
      {
        origin: { lat: origin.lat, lng: origin.lng },
        destination: { lat: currentLocation.lat, lng: currentLocation.lng },
        waypoints: [],
        travelMode: window.google.maps.TravelMode.DRIVING,
      },
      (result, status) => {
        if (status === "OK" && result) setPartialDirectionsResult(result);
        else setPartialDirectionsResult(null);
      }
    );
  }, [locations, mapLoaded, currentLocation, isLoaded]);


  useEffect(() => {
    return () => {
      if (mapRef.current) {
        mapRef.current = null;
      }
    };
  }, []);

  if (
    !currentLocation ||
    !Number.isFinite(currentLocation.lat) ||
    !Number.isFinite(currentLocation.lng)
  ) {
    return <div className="h-full p-4">Invalid or missing current location</div>;
  }

  if (loadError) {
    return <div className="h-full p-4">Error loading maps</div>;
  }

  if (!isLoaded) {
    return <div className="h-full p-4">Loading maps...</div>;
  }

  return (
    <GoogleMap
      mapContainerStyle={containerStyle}
      center={currentLocation}
      zoom={30}
      onLoad={onMapLoad}
      options={{
        styles: [
          { featureType: "poi", elementType: "all", stylers: [{ visibility: "off" }] },
          { featureType: "transit", elementType: "all", stylers: [{ visibility: "off" }] },
        ],
      }}
    >
      {/* Markers for each hop */}
      {locations.map((loc, idx) => (
        <React.Fragment key={idx}>
          <OverlayView
            position={{ lat: loc.lat, lng: loc.lng }}
            mapPaneName={OverlayView.OVERLAY_MOUSE_TARGET}
          >
            <div
              onMouseEnter={() => setHoveredMarkerIndex(idx)}
              onMouseLeave={() => setHoveredMarkerIndex(null)}
              className="relative flex items-center justify-center w-6 h-6 bg-amber-50 rounded-full cursor-pointer shadow-md hover:scale-110 transition-transform"
              title={loc.name}
            >
              <div className="w-3.5 h-3.5 bg-blue-500 rounded-full"></div>
            </div>
          </OverlayView>
          {hoveredMarkerIndex === idx && (
            <OverlayView
              position={{ lat: loc.lat, lng: loc.lng }}
              mapPaneName={OverlayView.OVERLAY_MOUSE_TARGET}
            >
              <div className="bg-white w-fit p-2 rounded-md shadow-md text-sm text-black whitespace-nowrap border border-gray-200 mt-8">
                <div className="font-semibold">{loc.name}</div>
                <div>Status: {loc.status}</div>
                <div>Time: {loc.timestamp}</div>
              </div>
            </OverlayView>
          )}
        </React.Fragment>
      ))}

      {/* Current vehicle location marker */}
      <OverlayView
        position={currentLocation}
        mapPaneName={OverlayView.OVERLAY_MOUSE_TARGET}
      >
        <div className="relative w-[60px] h-[60px]">
          <div className="absolute inset-0 rounded-full bg-blue-400 opacity-30 pointer-events-none animate-[ping_2s_ease-in-out_infinite]"></div>
          <div className="absolute inset-2 rounded-full bg-blue-500 opacity-50 pointer-events-none"></div>
          <div
            title="Vehicle Current Location"
            className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10"
            style={{ transform: ` rotate(220deg)` }}
          >
            <Image
              src="/images/truck.svg"
              alt="Truck icon"
              height={30}
              width={30}
              className="opacity-100"
              style={{ display: "block" }}
            />
          </div>
        </div>
      </OverlayView>

      {/* Full Route   */}
      {directionsResult && (
        <DirectionsRenderer
          directions={directionsResult}
          options={{
            suppressMarkers: true,
            polylineOptions: {
              strokeColor: "#60A5FA",
              strokeOpacity: 0.7,
              strokeWeight: 4,
            },
          }}
        />
      )}

      {/* start to current location route  */}
      {partialDirectionsResult && (
        <DirectionsRenderer
          directions={partialDirectionsResult}
          options={{
            suppressMarkers: true,
            polylineOptions: {
              strokeColor: "#2563EB",
              strokeOpacity: 1,
              strokeWeight: 5,
            },
          }}
        />
      )}
    </GoogleMap>
  );
};

export default MapComponent;
